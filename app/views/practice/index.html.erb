<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>面接練習</title>
    <link rel="stylesheet" href="../_shared/style.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="css/home.scss">
    <link href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" rel="stylesheet">
  </head>
  <body>
    <header>
      <div class="header-logo">
        <nav>
          <% if user_signed_in? %>
           <ul>
              <li id = "first">
                <%= link_to("練習", root_path)  %>
              </li>
              <li id = "second">
                <%= link_to("ログアウト", destroy_user_session_path)  %> 
              </li>
              <li id = "third">
                <%= link_to("Myルーム", edit_user_registration_path)  %> 
              </li>
           </ul>
          <% else %>
           <ul>
              <li id = "first">
                <%= link_to("練習", root_path)  %>
              </li>
              <li id = "second">
                <%= link_to("ログイン", new_user_session_path)  %>
              </li>
              <li id = "third">
                <%= link_to("新規登録", new_user_registration_path)  %>
              </li>
           </ul>
          <% end %>
        </nav>  
      </div>
      <div class = "header-icon">
        <ul>
          <li>
            <form id = "news_form" action = "#" method = "get">
              <button type = "submit" id = news_btn>
               <i class="far fa-bell fa-lg fa-fw"></i>
              </button>
            </form>
          </li>
        <% if user_signed_in? %>
          <li>
           <img src = <%= current_user.image_name %> >
          </li>
        <% else %>
          <li>
           <a href="#"><img src="https://via.placeholder.com/48x48" alt="プロフ画像"></a>
          </li>
        <% end %>
        </ul>
      </div>
    </header>
    <main>
      <div class="container">
        <h1 class="heading">面接練習</h1>
        <p class="note">
          IDを押して呼び出してください
        </p>
        <div class="p2p-media">
          <div class="remote-stream">
            <video id="js-remote-stream"  autoplay muted playsinline></video>
          </div>
          <div class="local-stream">
            <video id="js-local-stream"  autoplay muted playsinline></video>
            <p>あなたの ID: <span id="js-local-id"></span></p>
            <input type="text" placeholder="Remote Peer ID" id="js-remote-id">
            <button id="js-call-trigger">呼び出し</button>
            <button id="js-close-trigger">閉じる</button>
          </div>
        </div>
        <p class="meta" id="js-meta"></p>
      </div>
    </main>
    <script src="//cdn.webrtc.ecl.ntt.com/skyway-latest.js"></script>
    <script src="../_shared/key.js"></script>
    <script src="./script.js"></script>
    <script>
      let localStream;
    
      // カメラ映像取得
      navigator.mediaDevices.getUserMedia({video: true, audio: true})
        .then( stream => {
        // 成功時にvideo要素にカメラ映像をセットし、再生
        const videoElm = document.getElementById('js-local-stream');
        videoElm.srcObject = stream;
        videoElm.play();
        // 着信時に相手にカメラ映像を返せるように、グローバル変数に保存しておく
        localStream = stream;
      }).catch( error => {
        // 失敗時にはエラーログを出力
        console.error('mediaDevice.getUserMedia() error:', error);
        return;
      });
          //Peer作成
      const peer = new Peer({
        key: '5ac8fb66-fb5c-4f89-82a0-9cd0949fcb64',
        debug: 3
      });
      
       //PeerID取得
      peer.on('open', () => {
          document.getElementById('my-id').textContent = peer.id;
      });
      // 発信処理
        document.getElementById('make-call').onclick = () => {
          const theirID = document.getElementById('their-id').value;
          const mediaConnection = peer.call(theirID, localStream);
          setEventListener(mediaConnection);
        };
        
        // イベントリスナを設置する関数
        const setEventListener = mediaConnection => {
          mediaConnection.on('stream', stream => {
            // video要素にカメラ映像をセットして再生
            const videoElm = document.getElementById('their-video')
            videoElm.srcObject = stream;
            videoElm.play();
          });
        }
        //着信処理
        peer.on('call', mediaConnection => {
          mediaConnection.answer(localStream);
          setEventListener(mediaConnection);
        });
          peer.on('error', err => {
          alert(err.message);
        });
        peer.on('close', () => {
        alert('通信が切断しました。');
        });
      </script>
  </body>
</html>

